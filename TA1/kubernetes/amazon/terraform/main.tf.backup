terraform {
  required_version = "~> 1.3.0"
}

provider "aws" {
  version = "~> 4.15.0"
  region  = var.region
}

data "aws_eks_cluster" "cluster" {
  name = module.eks.cluster_id
}

data "aws_eks_cluster_auth" "cluster" {
  name = module.eks.cluster_id
}

data "aws_availability_zones" "available" {
}

resource "aws_security_group" "worker_group_mgmt_one" {
  name_prefix = "worker_group_mgmt_one"
  vpc_id      = module.vpc.vpc_id

  ingress {
    from_port = 22
    to_port   = 22
    protocol  = "tcp"

    cidr_blocks = [
      "10.0.0.0/8",
      "172.16.0.0/12",
      "192.168.0.0/16"
    ]
  }
}

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "3.14.2"

  name                 = "${var.vpc_name}"
  cidr                 = "10.0.0.0/16"
  azs                  = slice(data.aws_availability_zones.available.names, 0, 3)
  private_subnets      = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
  public_subnets       = ["10.0.4.0/24", "10.0.5.0/24", "10.0.6.0/24"]  
  enable_nat_gateway   = true
  single_nat_gateway   = true
  one_nat_gateway_per_az = false
  enable_dns_hostnames = true
  enable_dns_support   = true


  public_subnet_tags = {
    "kubernetes.io/cluster/${var.cluster_name}" = "shared"
    "kubernetes.io/role/elb"                      = 1
  }

  private_subnet_tags = {
    "kubernetes.io/cluster/${var.cluster_name}" = "shared"
    "kubernetes.io/role/internal-elb"             = 1
  }
}


module "eks" {
  source       = "terraform-aws-modules/eks/aws"
  cluster_name    = var.cluster_name
  cluster_version = "1.22"
  subnet_ids         = module.vpc.public_subnets
  version = "18.26.6"
  cluster_endpoint_private_access = false 
  cluster_endpoint_public_access  = true
  enable_irsa = true
  vpc_id = module.vpc.vpc_id

  # EKS Managed Node Group(s)
  eks_managed_node_group_defaults = {
    ami_type       = "AL2_x86_64"
    disk_size      = 50
    #instance_types = ["m6i.large", "m5.large", "m5n.large", "m5zn.large"]

    # attach_cluster_primary_security_group = true
    # vpc_security_group_ids                = [aws_security_group.worker_group_mgmt_one.id]
  }

  eks_managed_node_groups = {
      green={
        name           = "worker-group-1"
        instance_type  = "t2.small"
        min_size       = 1
        max_size       = 3
        desired_size   = 2      
        # cluster_primary_security_group_id = module.eks.cluster_primary_security_group_id
        # vpc_security_group_ids = [aws_security_group.worker_group_mgmt_one.id]

      }
  }
  
}

data "aws_eks_cluster" "default" {
  name = module.eks.cluster_id
}

data "aws_eks_cluster_auth" "default" {
  name = module.eks.cluster_id
}

provider "kubernetes" {
  host                   = data.aws_eks_cluster.cluster.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority.0.data)
  token                  = data.aws_eks_cluster_auth.cluster.token
}

resource "kubernetes_persistent_volume" "postgresql-data-pv" {
  metadata {
    name = "postgresql-data"
  }
  spec {
    storage_class_name="gp2"
    capacity = {
      storage = "2Gi"
    }
    access_modes = ["ReadWriteOnce"]
    persistent_volume_source {
      vsphere_volume {
        volume_path = "/data/volume"
      }
    }
  }
}

provider "helm" {
    kubernetes {
      host                   = data.aws_eks_cluster.cluster.endpoint
      cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority.0.data)
      #token                  = data.aws_eks_cluster_auth.cluster.token
      exec {
        api_version = "client.authentication.k8s.io/v1beta1"
        args        = ["eks", "get-token", "--cluster-name", data.aws_eks_cluster.cluster.name]
        command     = "aws"
      }
  }
}

resource "kubernetes_namespace" "kong" {
  metadata {
    name = var.kong_cp_namespace
  }
}

resource "kubernetes_secret" "kong-cluster-cert" {
  metadata {
    name = "kong-cluster-cert"
    namespace = var.kong_cp_namespace

  }
  data = {
    "tls.crt" = file("${path.cwd}/certs/cluster.crt")
    "tls.key" = file("${path.cwd}/certs/cluster.key")
  }
 
  type = "kubernetes.io/tls"
}

resource "helm_release" "kong" {
  name       = "kong"
  atomic     = false
  skip_crds  = true
  repository = var.chart_repository
  chart      = var.chart_name
  version    = var.chart_version
  namespace  = var.kong_cp_namespace

  values = [
    "${file("${path.cwd}/kong-hybrid-cp-values.yaml")}"
  ]
}